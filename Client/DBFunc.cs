// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `DBFunc.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface DBFunc : Ice.Object, DBFuncOperations_, DBFuncOperationsNC_
    {
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_DBFunc_queryOne();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_DBFunc_queryDS(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_DBFunc_query(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_DBFunc_batchInsert(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_DBFunc_shutdown();
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface DBFuncPrx : Ice.ObjectPrx
    {
        void queryOne(string strSql);
        void queryOne(string strSql, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Demo.Callback_DBFunc_queryOne> begin_queryOne(string strSql);
        Ice.AsyncResult<Demo.Callback_DBFunc_queryOne> begin_queryOne(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_queryOne(string strSql, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_queryOne(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_queryOne(Ice.AsyncResult r__);

        string queryDS(string strSql);
        string queryDS(string strSql, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Demo.Callback_DBFunc_queryDS> begin_queryDS(string strSql);
        Ice.AsyncResult<Demo.Callback_DBFunc_queryDS> begin_queryDS(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_queryDS(string strSql, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_queryDS(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_queryDS(Ice.AsyncResult r__);

        int query(string strSql);
        int query(string strSql, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Demo.Callback_DBFunc_query> begin_query(string strSql);
        Ice.AsyncResult<Demo.Callback_DBFunc_query> begin_query(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_query(string strSql, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_query(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_query(Ice.AsyncResult r__);

        int batchInsert(string data);
        int batchInsert(string data, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Demo.Callback_DBFunc_batchInsert> begin_batchInsert(string data);
        Ice.AsyncResult<Demo.Callback_DBFunc_batchInsert> begin_batchInsert(string data, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_batchInsert(string data, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_batchInsert(string data, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_batchInsert(Ice.AsyncResult r__);

        void shutdown();
        void shutdown(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Demo.Callback_DBFunc_shutdown> begin_shutdown();
        Ice.AsyncResult<Demo.Callback_DBFunc_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_shutdown(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_shutdown(Ice.AsyncResult r__);
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface DBFuncOperations_
    {
        void queryOne(string strSql, Ice.Current current__);

        string queryDS(string strSql, Ice.Current current__);

        int query(string strSql, Ice.Current current__);

        int batchInsert(string data, Ice.Current current__);

        void shutdown(Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface DBFuncOperationsNC_
    {
        void queryOne(string strSql);

        string queryDS(string strSql);

        int query(string strSql);

        int batchInsert(string data);

        void shutdown();
    }
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class DBFuncPrxHelper : Ice.ObjectPrxHelperBase, DBFuncPrx
    {
        #region Synchronous operations

        public int batchInsert(string data)
        {
            return batchInsert(data, null, false);
        }

        public int batchInsert(string data, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return batchInsert(data, context__, true);
        }

        private int batchInsert(string data, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("batchInsert");
                    delBase__ = getDelegate__(false);
                    DBFuncDel_ del__ = (DBFuncDel_)delBase__;
                    return del__.batchInsert(data, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int query(string strSql)
        {
            return query(strSql, null, false);
        }

        public int query(string strSql, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return query(strSql, context__, true);
        }

        private int query(string strSql, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("query");
                    delBase__ = getDelegate__(false);
                    DBFuncDel_ del__ = (DBFuncDel_)delBase__;
                    return del__.query(strSql, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public string queryDS(string strSql)
        {
            return queryDS(strSql, null, false);
        }

        public string queryDS(string strSql, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return queryDS(strSql, context__, true);
        }

        private string queryDS(string strSql, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("queryDS");
                    delBase__ = getDelegate__(false);
                    DBFuncDel_ del__ = (DBFuncDel_)delBase__;
                    return del__.queryDS(strSql, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void queryOne(string strSql)
        {
            queryOne(strSql, null, false);
        }

        public void queryOne(string strSql, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            queryOne(strSql, context__, true);
        }

        private void queryOne(string strSql, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    DBFuncDel_ del__ = (DBFuncDel_)delBase__;
                    del__.queryOne(strSql, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void shutdown()
        {
            shutdown(null, false);
        }

        public void shutdown(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            shutdown(context__, true);
        }

        private void shutdown(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    DBFuncDel_ del__ = (DBFuncDel_)delBase__;
                    del__.shutdown(context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Demo.Callback_DBFunc_batchInsert> begin_batchInsert(string data)
        {
            return begin_batchInsert(data, null, false, null, null);
        }

        public Ice.AsyncResult<Demo.Callback_DBFunc_batchInsert> begin_batchInsert(string data, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_batchInsert(data, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_batchInsert(string data, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_batchInsert(data, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_batchInsert(string data, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_batchInsert(data, ctx__, true, cb__, cookie__);
        }

        private const string __batchInsert_name = "batchInsert";

        public int end_batchInsert(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __batchInsert_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Demo.Callback_DBFunc_batchInsert> begin_batchInsert(string data, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__batchInsert_name);
            IceInternal.TwowayOutgoingAsync<Demo.Callback_DBFunc_batchInsert> result__ =  new IceInternal.TwowayOutgoingAsync<Demo.Callback_DBFunc_batchInsert>(this, __batchInsert_name, batchInsert_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__batchInsert_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(data);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void batchInsert_completed__(Ice.AsyncResult r__, Demo.Callback_DBFunc_batchInsert cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_batchInsert(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Demo.Callback_DBFunc_query> begin_query(string strSql)
        {
            return begin_query(strSql, null, false, null, null);
        }

        public Ice.AsyncResult<Demo.Callback_DBFunc_query> begin_query(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_query(strSql, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_query(string strSql, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_query(strSql, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_query(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_query(strSql, ctx__, true, cb__, cookie__);
        }

        private const string __query_name = "query";

        public int end_query(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __query_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Demo.Callback_DBFunc_query> begin_query(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__query_name);
            IceInternal.TwowayOutgoingAsync<Demo.Callback_DBFunc_query> result__ =  new IceInternal.TwowayOutgoingAsync<Demo.Callback_DBFunc_query>(this, __query_name, query_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__query_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(strSql);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void query_completed__(Ice.AsyncResult r__, Demo.Callback_DBFunc_query cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_query(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Demo.Callback_DBFunc_queryDS> begin_queryDS(string strSql)
        {
            return begin_queryDS(strSql, null, false, null, null);
        }

        public Ice.AsyncResult<Demo.Callback_DBFunc_queryDS> begin_queryDS(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_queryDS(strSql, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_queryDS(string strSql, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_queryDS(strSql, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_queryDS(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_queryDS(strSql, ctx__, true, cb__, cookie__);
        }

        private const string __queryDS_name = "queryDS";

        public string end_queryDS(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __queryDS_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            string ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readString();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Demo.Callback_DBFunc_queryDS> begin_queryDS(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__queryDS_name);
            IceInternal.TwowayOutgoingAsync<Demo.Callback_DBFunc_queryDS> result__ =  new IceInternal.TwowayOutgoingAsync<Demo.Callback_DBFunc_queryDS>(this, __queryDS_name, queryDS_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__queryDS_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(strSql);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void queryDS_completed__(Ice.AsyncResult r__, Demo.Callback_DBFunc_queryDS cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_queryDS(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Demo.Callback_DBFunc_queryOne> begin_queryOne(string strSql)
        {
            return begin_queryOne(strSql, null, false, null, null);
        }

        public Ice.AsyncResult<Demo.Callback_DBFunc_queryOne> begin_queryOne(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_queryOne(strSql, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_queryOne(string strSql, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_queryOne(strSql, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_queryOne(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_queryOne(strSql, ctx__, true, cb__, cookie__);
        }

        private const string __queryOne_name = "queryOne";

        public void end_queryOne(Ice.AsyncResult r__)
        {
            end__(r__, __queryOne_name);
        }

        private Ice.AsyncResult<Demo.Callback_DBFunc_queryOne> begin_queryOne(string strSql, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Demo.Callback_DBFunc_queryOne> result__ = new IceInternal.OnewayOutgoingAsync<Demo.Callback_DBFunc_queryOne>(this, __queryOne_name, queryOne_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__queryOne_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(strSql);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void queryOne_completed__(Demo.Callback_DBFunc_queryOne cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Demo.Callback_DBFunc_shutdown> begin_shutdown()
        {
            return begin_shutdown(null, false, null, null);
        }

        public Ice.AsyncResult<Demo.Callback_DBFunc_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_shutdown(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_shutdown(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_shutdown(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_shutdown(ctx__, true, cb__, cookie__);
        }

        private const string __shutdown_name = "shutdown";

        public void end_shutdown(Ice.AsyncResult r__)
        {
            end__(r__, __shutdown_name);
        }

        private Ice.AsyncResult<Demo.Callback_DBFunc_shutdown> begin_shutdown(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Demo.Callback_DBFunc_shutdown> result__ = new IceInternal.OnewayOutgoingAsync<Demo.Callback_DBFunc_shutdown>(this, __shutdown_name, shutdown_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__shutdown_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void shutdown_completed__(Demo.Callback_DBFunc_shutdown cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static DBFuncPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DBFuncPrx r = b as DBFuncPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                DBFuncPrxHelper h = new DBFuncPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static DBFuncPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            DBFuncPrx r = b as DBFuncPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                DBFuncPrxHelper h = new DBFuncPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static DBFuncPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    DBFuncPrxHelper h = new DBFuncPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DBFuncPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    DBFuncPrxHelper h = new DBFuncPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static DBFuncPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            DBFuncPrx r = b as DBFuncPrx;
            if(r == null)
            {
                DBFuncPrxHelper h = new DBFuncPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static DBFuncPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            DBFuncPrxHelper h = new DBFuncPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Demo::DBFunc",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new DBFuncDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new DBFuncDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, DBFuncPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static DBFuncPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                DBFuncPrxHelper result = new DBFuncPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface DBFuncDel_ : Ice.ObjectDel_
    {
        void queryOne(string strSql, _System.Collections.Generic.Dictionary<string, string> context__);

        string queryDS(string strSql, _System.Collections.Generic.Dictionary<string, string> context__);

        int query(string strSql, _System.Collections.Generic.Dictionary<string, string> context__);

        int batchInsert(string data, _System.Collections.Generic.Dictionary<string, string> context__);

        void shutdown(_System.Collections.Generic.Dictionary<string, string> context__);
    }
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class DBFuncDelM_ : Ice.ObjectDelM_, DBFuncDel_
    {
        public int batchInsert(string data, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("batchInsert", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(data);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int query(string strSql, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("query", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(strSql);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public string queryDS(string strSql, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("queryDS", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(strSql);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    string ret__;
                    ret__ = is__.readString();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void queryOne(string strSql, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("queryOne", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(strSql);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void shutdown(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("shutdown", Ice.OperationMode.Normal, context__);
            try
            {
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class DBFuncDelD_ : Ice.ObjectDelD_, DBFuncDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int batchInsert(string data, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "batchInsert", Ice.OperationMode.Normal, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                DBFunc servant__ = null;
                try
                {
                    servant__ = (DBFunc)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.batchInsert(data, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int query(string strSql, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "query", Ice.OperationMode.Normal, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                DBFunc servant__ = null;
                try
                {
                    servant__ = (DBFunc)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.query(strSql, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public string queryDS(string strSql, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "queryDS", Ice.OperationMode.Normal, context__);
            string result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                DBFunc servant__ = null;
                try
                {
                    servant__ = (DBFunc)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.queryDS(strSql, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void queryOne(string strSql, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "queryOne", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                DBFunc servant__ = null;
                try
                {
                    servant__ = (DBFunc)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.queryOne(strSql, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void shutdown(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "shutdown", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                DBFunc servant__ = null;
                try
                {
                    servant__ = (DBFunc)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.shutdown(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class DBFuncDisp_ : Ice.ObjectImpl, DBFunc
    {
        #region Slice operations

        public void queryOne(string strSql)
        {
            queryOne(strSql, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void queryOne(string strSql, Ice.Current current__);

        public string queryDS(string strSql)
        {
            return queryDS(strSql, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string queryDS(string strSql, Ice.Current current__);

        public int query(string strSql)
        {
            return query(strSql, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int query(string strSql, Ice.Current current__);

        public int batchInsert(string data)
        {
            return batchInsert(data, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int batchInsert(string data, Ice.Current current__);

        public void shutdown()
        {
            shutdown(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void shutdown(Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Demo::DBFunc",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus queryOne___(DBFunc obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string strSql;
            strSql = is__.readString();
            is__.endReadEncaps();
            obj__.queryOne(strSql, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus queryDS___(DBFunc obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string strSql;
            strSql = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            string ret__ = obj__.queryDS(strSql, current__);
            os__.writeString(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus query___(DBFunc obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string strSql;
            strSql = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.query(strSql, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus batchInsert___(DBFunc obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string data;
            data = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.batchInsert(data, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus shutdown___(DBFunc obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.istr().skipEmptyEncaps();
            obj__.shutdown(current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "batchInsert",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "query",
            "queryDS",
            "queryOne",
            "shutdown"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return batchInsert___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 4:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 5:
                {
                    return query___(this, inS__, current__);
                }
                case 6:
                {
                    return queryDS___(this, inS__, current__);
                }
                case 7:
                {
                    return queryOne___(this, inS__, current__);
                }
                case 8:
                {
                    return shutdown___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Demo::DBFunc was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Demo::DBFunc was not generated with stream support";
            throw ex;
        }

        #endregion
    }
}
